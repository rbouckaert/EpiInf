<!--
  ~ Copyright (C) 2015 Tim Vaughan <tgvaughan@gmail.com>
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beast version="2.0" namespace="
    beast.app.beauti
    :beast.core
    :beast.core.parameter
    :epiinf
    :epiinf.operators
    :epiinf.models
    :epiinf.distribs">


    <mergewith point='misc'>
        <fragment id='EpiModelParameter' spec="beastfx.app.beauti.Fragment">
            <![CDATA[
            <operator id='$(p)Scaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@$(p).t:$(n)" weight="1"/>
            <distribution id="$(p)Prior.t:$(n)" spec="beast.base.inference.distribution.Prior">
                <x idref="$(p).t:$(n)"/>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>
            <distribution id="$(p)ChangeTimesPrior.t:$(n)" spec="epiinf.util.ExponentialChangeTimesPrior">
                <changeTimes idref="$(p)ChangeTimes.t:$(n)"/>
                <meanIntervalLength spec="beast.base.inference.parameter.RealParameter" value="1.0" id="$(p)ChangeInterval.t:$(n)" estimate="false"/>
            </distribution>
            <distribution id="$(p)ChangeIntervalPrior.t:$(n)" spec="beast.base.inference.distribution.Prior">
                <x idref="$(p)ChangeInterval.t:$(n)"/>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>
            <operator id='$(p)ChangeTimesScaler.t:$(n)' spec='epiinf.util.ChangeTimesOperator' scaleFactor="0.8" weight="4">
                <changeTimes id="$(p)ChangeTimes.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" estimate="false"/>
            </operator>
            <operator id="$(p)ChangeIntervalScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.8" parameter="@$(p)ChangeInterval.t:$(n)" weight="4"/>
            ]]>

            <connect srcID="$(p).t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p)Prior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p)Scaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p).t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>

            <connect srcID="$(p)ChangeTimes.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimesScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimesPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimes.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>


            <connect srcID="$(p)ChangeInterval.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeIntervalScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeIntervalPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeInterval.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
        </fragment>
    </mergewith>

    <mergewith point='misc'>
        <fragment id='SATreeOperators' spec="beastfx.app.beauti.Fragment">
            <![CDATA[
            <operator id='$(m)SATreeScaler.t:$(n)' spec='beast.evolution.operators.SAScaleOperator' scaleFactor=".95" weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SATreeRootScaler.t:$(n)' spec='beast.evolution.operators.SAScaleOperator' scaleFactor=".95" weight="1" tree="@Tree.t:$(n)" rootOnly='true'/>
            <operator id='$(m)SAUniformOperator.t:$(n)' spec='beast.evolution.operators.SAUniform' weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SAWilsonBalding.t:$(n)' spec='beast.evolution.operators.SAWilsonBalding' weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SAWide.t:$(n)' spec='beast.evolution.operators.SAExchange' isNarrow="false" weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SANarrow.t:$(n)' spec='beast.evolution.operators.SAExchange' weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)LeafToSA.t:$(n)' spec='beast.evolution.operators.LeafToSampledAncestorJump' weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)UpDown.t:$(n)' spec='beast.base.inference.operator.UpDownOperator' scaleFactor=".75" weight="20" down="@Tree.t:$(n)"/>
            ]]>

            <connect srcID='$(m)SATreeScaler.t:$(n)'              targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)SATreeRootScaler.t:$(n)'          targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)SAUniformOperator.t:$(n)'         targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)SAWilsonBalding.t:$(n)'           targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)SAWide.t:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)SANarrow.t:$(n)'                  targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)LeafToSA.t:$(n)'                  targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='$(m)UpDown.t:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        </fragment>
    </mergewith>

    <mergewith point="treePriorTemplates">

        <subtemplate id="EpiTreePrior" class="epiinf.distribs.SMCTreeDensity" mainid="EpiTreePrior.t:$(n)"
                     suppressInputs="epiinf.distribs.SMCTreeDensity.tree,
                     epiinf.distribs.SMCTreeDensity.treeIntervals,
                     epiinf.distribs.SMCTreeDensity.incidenceParameter,
                     epiinf.distribs.SMCTreeDensity.useAdaptiveParticleCount,
                     epiinf.distribs.SMCTreeDensity.targetLogLikelihoodVar,
                     epiinf.distribs.SMCTreeDensity.particleCountTuningInterval,
                     epiinf.distribs.SMCTreeDensity.nParticlesMax">
            <![CDATA[
            <distribution id="EpiTreePrior.t:$(n)" spec="epiinf.distribs.SMCTreeDensity" nParticles="100">
                <tree idref="Tree.t:$(n)"/>
                <finalTreeSampleOffset id="finalTreeSampleOffset.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" estimate="false"/>
                <model id="model.t:$(n)" spec="epiinf.models.SISModel" rhoSamplingTimesBackward="true">
                	<rhoSamplingTime id="rhoSamplingTime.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0"/>
                    <S0 id="S0.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="199" lower="0" estimate="true"/>
                    <infectionRate id="infectionRate.t:$(n)" spec="beast.base.inference.parameter.RealParameter" lower="0" value="0.01" estimate="true"/>
                    <recoveryRate id="recoveryRate.t:$(n)" spec="beast.base.inference.parameter.RealParameter" lower="0" value="0.1" estimate="true"/>
                    <psiSamplingVariable id="psiSamplingVariable.t:$(n)" spec="beast.base.inference.parameter.RealParameter" lower="0" value="0.1" estimate="true"/>
                    <removalProb id="removalProb.t:$(n)" spec="beast.base.inference.parameter.RealParameter" lower="0.0" upper="1.0" value="1.0" estimate="true"/>
                    <rhoSamplingProb id="rhoSamplingProb.t:$(n)" spec="beast.base.inference.parameter.RealParameter" lower="0" value="0.0" estimate="false"/>
                    <origin id="epiOrigin.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="10.0" estimate="true"/>
                </model>
                <incidenceData id="incidenceData.t:$(n)" spec="epiinf.IncidenceData" valuesAreAges="true">
                    <finalSampleOffset id="finalIncidenceSampleOffset.t:$(n)"
                        spec="beast.base.inference.parameter.RealParameter"
                        value="0.0" estimate="false"/>
                </incidenceData>
            </distribution>

            <distribution id="epiOriginPrior.t:$(n)" spec="beast.base.inference.distribution.Prior">
                <x idref="epiOrigin.t:$(n)"/>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>

            <distribution id="finalTreeSampleOffsetPrior.t:$(n)" spec="beast.base.inference.distribution.Prior">
                <x idref="finalTreeSampleOffset.t:$(n)"/>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>

            <distribution id="S0Prior.t:$(n)" spec="beast.base.inference.distribution.Prior">
                <x idref="S0.t:$(n)"/>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>

            <distribution id="rhoSamplingProbPrior.t:$(n)" spec="beast.base.inference.distribution.Prior">
                <x idref="rhoSamplingProb.t:$(n)"/>
                <distr spec="beast.base.inference.distribution.Uniform"/>
            </distribution>

            <operator id='epiOriginScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@epiOrigin.t:$(n)" weight="1"/>
            <operator id='finalTreeSampleOffsetScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@finalTreeSampleOffset.t:$(n)" weight="1"/>
            <operator id='S0Scaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@S0.t:$(n)" weight="1"/>
            <operator id='rhoSamplingProbScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@rhoSamplingProb.t:$(n)" weight="1"/>

            <operator id="ParamUpDown.t:$(n)" spec="UpDownOperator" scaleFactor="0.8" weight="4">
                <up idref="infectionRate.t:$(n)"/>
            </operator>


            <!-- Trajectory logging -->
            <logger id="trajlog.t:$(n)" logEvery="1000" fileName="$(filebase).$(n).traj">
                <log id="trajectory.t:$(n)" spec='epiinf.TrajectoryLogger' treeDensity="@EpiTreePrior.t:$(n)"/>
            </logger>
            ]]>

            <plate fragment="SATreeOperators" var="m" range="EpiTreePrior"/>
            <plate fragment="EpiModelParameter" var="p" range="infectionRate,recoveryRate,psiSamplingVariable,removalProb"/>

            <connect srcID="ParamUpDown.t:$(n)" targetID="mcmc" inputName="operator"
                     if="Tree.t:$(n)/estimate=true and infectionRate.t:$(n)/estimate=true"/>
            <connect srcID="recoveryRate.t:$(n)" targetID="ParamUpDown.t:$(n)" inputName="up"
                     if="Tree.t:$(n)/estimate=true and recoveryRate.t:$(n)/estimate=true"/>
            <connect srcID="psiSamplingVariable.t:$(n)" targetID="ParamUpDown.t:$(n)" inputName="down"
                     if="Tree.t:$(n)/estimate=true and psiSamplingVariable.t:$(n)/estimate=true"/>

            <connect srcID="infectionRate.t:$(n)" targetID="EpiTreePriorUpDown.t:$(n)" inputName="up"
                     if="Tree.t:$(n)/estimate=true and infectionRate.t:$(n)/estimate=true"/>
            <connect srcID="recoveryRate.t:$(n)" targetID="EpiTreePriorUpDown.t:$(n)" inputName="up"
                     if="Tree.t:$(n)/estimate=true and recoveryRate.t:$(n)/estimate=true"/>
            <connect srcID="psiSamplingVariable.t:$(n)" targetID="EpiTreeUpDown.t:$(n)" inputName="down"
                     if="Tree.t:$(n)/estimate=true and psiSamplingVariable.t:$(n)/estimate=true"/>

            <connect srcID="EpiTreePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true">
                Epidemic tree prior on tree t:$(n)
            </connect>

            <connect srcID="finalTreeSampleOffset.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and finalTreeSampleOffset.t:$(n)/estimate=true"/>
            <connect srcID="finalTreeSampleOffsetPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and finalTreeSampleOffset.t:$(n)/estimate=true"/>
            <connect srcID="finalTreeSampleOffsetScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and finalTreeSampleOffset.t:$(n)/estimate=true"/>
            <connect srcID="finalTreeSampleOffset.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and finalTreeSampleOffset.t:$(n)/estimate=true"/>

            <connect srcID="epiOrigin.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true"/>
            <connect srcID="epiOriginPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true">
                Prior on epidemic origin time.
            </connect>
            <connect srcID="epiOriginScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true"/>
            <connect srcID="epiOrigin.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true"/>

            <connect srcID="S0.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="S0.t:$(n)" targetID="ParamUpDown.t:$(n)" inputName="down"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="S0Prior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true">
                Prior on initial susceptible population size.
            </connect>
            <connect srcID="S0Scaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="ParamUpDown.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="S0.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>

            <connect srcID="rhoSamplingProb.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true"/>
            <connect srcID="rhoSamplingProbPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true">
                Prior on contemporaneous sampling rate.
            </connect>
            <connect srcID="rhoSamplingProbScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true"/>
            <connect srcID="rhoSamplingProb.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true"/>

            <connect srcID="trajlog.t:$(n)" targetID="mcmc" inputName="logger"
                     if="inposterior(EpiTreePrior.t:$(n))"/>

        </subtemplate>

        <!--
        <subtemplate id='IncidenceData' class='epiinf.IncidenceData' mainid='incidenceData.t:$(n)'>
            <![CDATA[
            <incidenceData id="incidenceData.t:$(n)" spec="epiinf.IncidenceData">
            </incidenceData>
            ]]>

            <connect srcID="incidenceData.t:$(n)" targetID="EpiTreePrior.t:$(n)" inputName="incidenceData"
                     if="inposterior(EpiTreePrior.t:$(n))"/>
        </subtemplate>
        -->

    </mergewith>




</beast>
